<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>github.com/shanewwarren</title>
    <atom:link href="http://localhost:8080/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://localhost:8080</link>
    <description>Buliding things... and stuff!</description>
    <pubDate>Sat, 25 Oct 2014 13:53:00 -0700</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>Extending Entity Framework Migration Operations</title>
      <link>http://localhost:8080/articles/entity-framework-writing-migrations/</link>
      <pubDate>Sat, 25 Oct 2014 13:53:00 -0700</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/entity-framework-writing-migrations/</guid>
      <author></author>
      <description>&lt;p&gt;Writing migrations in Entity Framework (v6.+) provides a convienient way for developers to use C# to make SQL changes to a database.
The &lt;code&gt;DbMigration&lt;/code&gt; class which all migrations inherit from offers many helpful operations to help generate SQL.  The operations that the &lt;code&gt;DbMigration&lt;/code&gt; class offers does not cover every database type that you may want to write a migration for though.  &lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;To create views, functions, or even define custom types developers need to resort the the &lt;code&gt;Sql&lt;/code&gt; command and need to write out the SQL directly in the migration.  The &lt;code&gt;Sql&lt;/code&gt; operation is useful, but it can result in a lot of duplication of SQL.  In this tutorial I’ll show you how to move past using the &lt;code&gt;Sql&lt;/code&gt; operation and extend the &lt;code&gt;DbMigrations&lt;/code&gt; class for your own custom operations that generate SQL.&lt;/p&gt;
&lt;h2 id=&quot;custom-migration-operations&quot;&gt;Custom Migration Operations&lt;/h2&gt;
&lt;p&gt;In this post, I’ll demonstrate how to create a pair of custom operations which will generate the SQL that can create and drop a trigger.&lt;/p&gt;
&lt;p&gt;Creating and dropping a trigger requires two separate operations.  Each of these operations need to inherit from the &lt;code&gt;MigrationOperation&lt;/code&gt; class.  Listed below is the code for our two operations &lt;code&gt;DropTriggerOperation&lt;/code&gt; and &lt;code&gt;CreateTriggerOperation&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-cs&quot;&gt;
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; CreateTriggerOperation : MigrationOperation
    {
        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CreateTriggerOperation&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; triggerName,
            &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; tableName,
            CreateTriggerExecutionContextOption executionContext,
            CreateTriggerActionOption action,
            &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; body) : &lt;span class=&quot;title&quot;&gt;base&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)
        {
            TriggerName = triggerName;
            TableName = tableName;
            ExecutionContext = executionContext;
            Action = action;
            Body = body;
        }

        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; TriggerName { &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; }

        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; TableName { &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; }

        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; CreateTriggerExecutionContextOption ExecutionContext { &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; }

        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; CreateTriggerActionOption Action { &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; }

        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; Body { &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; }

        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; MigrationOperation Inverse
        {
            &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; { &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DropTriggerOperation(TriggerName); }
        }

        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; IsDestructiveChange
        {
            &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; { &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;; }
        }
    }


    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; DropTriggerOperation : MigrationOperation
    {
        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DropTriggerOperation&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; triggerName)
            : &lt;span class=&quot;title&quot;&gt;base&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)
        {
            TriggerName = triggerName;
        }
        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; TriggerName { &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; }

        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; MigrationOperation Inverse
        {
            &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; { &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; NotSupportedOperation.Instance; }
        }

        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; IsDestructiveChange
        {
            &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; { &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;; }
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;MigrationOperation&lt;/code&gt; provides the following properties to override:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A virtual property &lt;code&gt;Inverse&lt;/code&gt; which takes another &lt;code&gt;MigrationOperation&lt;/code&gt; which is used to revert the current operation.&lt;/li&gt;
&lt;li&gt;A abstract property &lt;code&gt;IsDestructiveChange&lt;/code&gt; which indicates if the operation may result in data loss.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Along with overriding these properties the operations should include the basic information necessary to generate the appropriate SQL statement.  Since creating a trigger has options for when the trigger should be executed and during what context some we can create additional enums to encapsulate these choices.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-cs&quot;&gt;
    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; CreateTriggerExecutionContextOption {
        For,
        After,
        InsteadOf
    }

    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; CreateTriggerActionOption {
        Insert,
        Update,
        Delete
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;generating-the-sql&quot;&gt;Generating the SQL&lt;/h2&gt;
&lt;p&gt;To generate the SQL for your custom operations you will need to override the specific &lt;code&gt;MigrationSqlGenerator&lt;/code&gt; class depending on which database you are trying to add the custom operations for.  Entity Framework currently ships with two classes which inherit from &lt;code&gt;MigrationSqlGenerator&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Microsoft SQL Server database: &lt;code&gt;SqlServerMigrationSqlGenerator&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Microsoft SQL Server Compact Edition database: &lt;code&gt;SqlCeMigrationSqlGenerator&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this example we will target the Microsoft SQL Server.&lt;/p&gt;
&lt;p&gt;Create a class which inherits from the &lt;code&gt;SqlServerMigrationSqlGenerator&lt;/code&gt; then add the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-cs&quot;&gt;
    class CustomSqlServerMigrationSqlGenerator : SqlServerMigrationSqlGenerator
    {
        &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Generate&lt;/span&gt;(MigrationOperation migrationOperation)
        {
            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (migrationOperation &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; CreateTriggerOperation)
            {
                GenerateCreateTrigger(migrationOperation &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; CreateTriggerOperation);
            }
            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (migrationOperation &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; DropTriggerOperation)
            {
                GenerateDropTrigger(migrationOperation &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; DropTriggerOperation);
            }
        }

        &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GenerateCreateTrigger&lt;/span&gt;(CreateTriggerOperation operation)
        {
            &lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; (IndentedTextWriter writer = Writer())
            {
                writer.WriteLine(&lt;span class=&quot;string&quot;&gt;@&quot;CREATE TRIGGER {0}
                                       ON {1}
                                       {2} {3}
                                       AS
                                        {4}; &quot;&lt;/span&gt;,
                                  operation.TriggerName,
                                  operation.TableName,
                                  GetTriggerExecutionContextString(operation.ExecutionContext),
                                  GetTriggerActionString(operation.Action),
                                  operation.Body);
                Statement(writer);
            }

        }

        &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;GetTriggerExecutionContextString&lt;/span&gt;(CreateTriggerExecutionContextOption option)
        {
            &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (option)
            {
                &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; CreateTriggerExecutionContextOption.For:
                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;FOR&quot;&lt;/span&gt;;
                &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; CreateTriggerExecutionContextOption.After:
                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;AFTER&quot;&lt;/span&gt;;
                &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; CreateTriggerExecutionContextOption.InsteadOf:
                &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:
                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;INSTEAD OF&quot;&lt;/span&gt;;
            }
        }

        &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;GetTriggerActionString&lt;/span&gt;(CreateTriggerActionOption option)
        {
            &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (option)
            {
                &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; CreateTriggerActionOption.Insert:
                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;INSERT&quot;&lt;/span&gt;;
                &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; CreateTriggerActionOption.Update:
                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;UPDATE&quot;&lt;/span&gt;;
                &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; CreateTriggerActionOption.Delete:
                &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:
                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;DELETE&quot;&lt;/span&gt;;
            }
        }

        &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GenerateDropTrigger&lt;/span&gt;(DropTriggerOperation operation)
        {
            &lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; (IndentedTextWriter writer = Writer())
            {
                writer.WriteLine(&lt;span class=&quot;string&quot;&gt;&quot;DROP TRIGGER {0}; &quot;&lt;/span&gt;,
                                  operation.TriggerName);
                Statement(writer);
            }
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By overriding the &lt;code&gt;Generate(MigrationOperation migrationOperation)&lt;/code&gt; you can intercept how the &lt;code&gt;SqlServerMigrationSqlGenerator&lt;/code&gt; generates SQL for an unknown operation which inherits from the &lt;code&gt;SqlServerMigrationSqlGenerator&lt;/code&gt; class.  Depending on the type of operation we can generate the appropriate SQL based on the kind of operation it is.&lt;/p&gt;
&lt;h2 id=&quot;add-the-extension-methods&quot;&gt;Add the extension methods&lt;/h2&gt;
&lt;p&gt;Finally, in order to make these operations available to our migrations we need to write a few extension methods for the &lt;code&gt;DbMigrator&lt;/code&gt; class and set them up to pass in the data we need.  The following extension methods now expose these operations to our migrations:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-cs&quot;&gt;
        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CreateTrigger&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; DbMigration migration,
            &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; triggerName, &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; tableName,
            CreateTriggerExecutionContextOption executionContext,
            CreateTriggerActionOption action,
            &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; body)
        {
            ((IDbMigration)migration)
              .AddOperation(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CreateTriggerOperation(triggerName,
                 tableName, executionContext, action, body));
        }

        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DropTrigger&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; DbMigration migration,
         &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; triggerName)
        {
            ((IDbMigration)migration)
              .AddOperation(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DropTriggerOperation(triggerName));
        }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;using-the-new-operations-in-migrations&quot;&gt;Using the new operations in migrations&lt;/h2&gt;
&lt;p&gt;Now with our extension methods in place we can make use of our new operations in our migrations like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-cs&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;partial&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; AddMyTriggerName : DbMigration
    {
        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Up&lt;/span&gt;()
        {
            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.CreateTrigger(&lt;span class=&quot;string&quot;&gt;&quot;MyTriggerName&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;TableName&quot;&lt;/span&gt;,
                 CreateTriggerExecutionContextOption.For,
                 CreateTriggerActionOption.Insert,
                 &lt;span class=&quot;string&quot;&gt;@&quot;... some sql trigger code to execute &quot;&lt;/span&gt;);

        }

        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Down&lt;/span&gt;()
        {
            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.DropTrigger(&lt;span class=&quot;string&quot;&gt;&quot;MyTriggerName&quot;&lt;/span&gt;);
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;While the built-in operations can accomdate most of your needs when writing migrations, being able to add custom operations can greatly reduce duplication and can provide a better interface to generating your migrations.&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>